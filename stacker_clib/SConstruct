import os
import os.path
import pysvn
env = Environment()

def casa_svnversion(casapath):
    import re
    import os.path
    casapyinfofile = open(os.path.join(casapath, 'casapyinfo'))
    svnversion = None
    for line in casapyinfofile:
        match = re.match('SVNVERSION="([0-9]*)"', line)
        if match:
            svnversion = match.groups()[0]

    if svnversion is None:
        raise IOError('Can not find casa version.')

    return svnversion
        

def whichpath(file):
    import os
    import os.path
    for path in os.environ['PATH'].split(':'):
        if os.path.exists(os.path.join(path, file)):
            l = os.path.join(path, file)
            while os.path.islink(l):
                l = os.path.join( os.path.dirname(l), os.readlink(l))
            return os.path.dirname(l)

    return None

AddOption('--casapath',
          dest='casapath',
          type='string',
          nargs = 1,
          action='store',
          metavar='DIR',
          help='Path of casa installation.')
casapath = GetOption('casapath')

if casapath is None:
    casapath = whichpath('casapy')
casalibpath = os.path.join(casapath, 'lib')
casapyinclude = os.path.join(casapath, 'include')

svnversion = casa_svnversion(casapath)
if int(svnversion) > 22889:
    print('Downloading casacore headers matching casapy svn revision {0}'.format(svnversion))
    client = pysvn.Client()
    casacore_svnpath = 'https://svn.cv.nrao.edu/svn/casa/trunk/casacore/'
    casacore_path = 'casacore-for-casapy-r{0}'.format(svnversion)
    svnrevision=pysvn.Revision(pysvn.opt_revision_kind.number, svnversion)
    rev = client.checkout(casacore_svnpath, casacore_path, svnrevision, svnrevision)
    print('done')

if int(svnversion) > 22889:
    env.Append(CPPPATH = [casacore_path, casapyinclude])
else:
    env.Append(CPPPATH = [casapyinclude, os.path.join(casapyinclude, 'casacore')])

env.Append(LIBPATH = [casalibpath])
conf = Configure(env)
if conf.CheckLib('casa_casa'):
    env.Append(LIBS = ['casa_scimath', 'casa_casa', 'casa_tables', 'casa_images', 
                    'casa_ms', 'casa_components', 'casa_coordinates',
                    'casa_lattices','casa_measures', 'casa_scimath_f', 'casa_fits', 
                    'casa_msfits', 'casa_derivedmscal', 'casa_mirlib'])
elif conf.CheckLib('casacore'):
    env.Append(LIBS = ['casacore'])
else:
    print('Did not find casa libraries!')
    Exit(1)

env.Append(LIBS=File(os.path.join(casalibpath, 'libgfortran.so.1')))
env.Append(LIBS=File(os.path.join(casalibpath, 'liblapack.so.3')))
env.Append(LIBS=File(os.path.join(casalibpath, 'libblas.so.3')))
env.Append(LIBS=File(os.path.join(casalibpath, 'libwcs.so.4.7')))
env.Append(LIBS=File(os.path.join(casalibpath, 'libcfitsio.so.0')))
env.Append(CCFLAGS = ['-fPIC','-O3'])

Sources = []
Sources.append("Coords.cpp")
Sources.append("Model.cpp")
#Sources.append("DataIOFits.cpp")
Sources.append("msio.cpp")
Sources.append("Chunk.cpp")
Sources.append("PrimaryBeam.cpp")
Sources.append("MSPrimaryBeam.cpp")
Sources.append("ModsubChunkComputer.cpp")
Sources.append("StackChunkComputer.cpp")
Sources.append("MSComputer.cpp")
Sources.append('stacker.cpp')

object_list = env.SharedObject(Sources)
env.SharedLibrary(target='stacker-r{0}'.format(svnversion), source=object_list)
